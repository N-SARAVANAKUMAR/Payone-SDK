/*
 * $Id$
 * 
 * Copyright 2012 Exozet Games GmbH
 */
/**
 * 
 */
package com.payone.sdkdemoapp.gui;

import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;

import com.payone.sdkdemoapp.R;
import com.payone.sdkdemoapp.gui.base.InputActivity;
import com.payone.sdkdemoapp.model.PayoneRequestData;
import com.payone.sdkdemoapp.util.AppUtils;

/**
 * @author hendrik.apel
 * @version $Rev$ $Date$
 *
 */
public class PaymentDetailsCreditCardActivity extends InputActivity
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layout_paymentdetails_creditcard);

        addHideKeyboardListener((EditText) findViewById(R.id.editTextCreditcardVerification));
        setupSpinner();
    }

    /**
     * button listener
     * @param view - generated by the system
     */
    public void onCreditcardCheck(View view)
    {
        // gather data given in activity
        String cardNumber = readInput(R.id.editTextCreditcardNumber);
        String cardVerification = readInput(R.id.editTextCreditcardVerification);
        String cardMonth = readInput(R.id.editTextCreditcardExpirationMonth);
        String cardYear = readInput(R.id.editTextCreditcardExpirationYear);
        String cardType = readSpinner();

        // verify data
        if (!AppUtils.isStringValue(cardNumber) || !AppUtils.isStringValue(cardVerification)
                || !AppUtils.isStringValue(cardMonth) || !AppUtils.isStringValue(cardYear)
                || !AppUtils.isStringValue(cardType))
        {
            // show message
            MessageViewActivity.showMessage(getString(R.string.keyPaymentInputError), this);
        }
        else if (!AppUtils.checkCredentials(this))
        {
            // show message
            MessageViewActivity.showMessage(getString(R.string.keyPaymentSettingsError), this);
        }
        else
        {
            String cardExpireDate = cardYear.concat(cardMonth);
            // create PayoneRequestData object, store in RequestActivity and start RequestActivity
            PayoneRequestData request = PayoneRequestData.createCreditCardRequest(cardNumber, cardVerification,
                    cardExpireDate, cardType);
            AppUtils.setRequestData(this, request);
            PaymentRequestActivity.REQUEST_DATA = request;
            Intent intent = new Intent(this, PaymentRequestActivity.class);
            startActivity(intent);
        }
    }

    private void setupSpinner()
    {
        Spinner spinner = (Spinner) findViewById(R.id.spinnerCreditCardType);
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.arrayCreditcardTypeLabels,
                android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);
    }

    private String readSpinner()
    {
        Spinner spinner = (Spinner) findViewById(R.id.spinnerCreditCardType);
        String result = "";
        int position = spinner.getSelectedItemPosition();
        if (position != AdapterView.INVALID_POSITION)
        {
            result = getResources().getStringArray(R.array.arrayCreditcardTypeValues)[position];
        }

        return result;
    }

    private void setSpinner(String string)
    {
        Spinner spinner = (Spinner) findViewById(R.id.spinnerCreditCardType);
        String[] values = getResources().getStringArray(R.array.arrayCreditcardTypeValues);
        for (int i = 0; i < values.length; i++)
        {
            if (values[i].equals(string))
            {
                spinner.setSelection(i);
                break;
            }
        }
    }

    /**
     * Store the given input in special preferences.
     */
    @Override
    protected void saveInput()
    {
        Editor editor = mData.edit();
        editor.putString(getString(R.string.idPreferencesInputCreditcardNumber),
                readInput(R.id.editTextCreditcardNumber));
        editor.putString(getString(R.string.idPreferencesInputCreditcardVerification),
                readInput(R.id.editTextCreditcardVerification));
        editor.putString(getString(R.string.idPreferencesInputCreditcardMonth),
                readInput(R.id.editTextCreditcardExpirationMonth));
        editor.putString(getString(R.string.idPreferencesInputCreditcardYear),
                readInput(R.id.editTextCreditcardExpirationYear));
        editor.putString(getString(R.string.idPreferencesInputCreditcardType), readSpinner());
        editor.commit();
    }

    /**
     * Restore the previous input from special preferences.
     */
    @Override
    protected void restoreInput()
    {
        setInput(R.id.editTextCreditcardNumber,
                mData.getString(getString(R.string.idPreferencesInputCreditcardNumber), ""));
        setInput(R.id.editTextCreditcardVerification,
                mData.getString(getString(R.string.idPreferencesInputCreditcardVerification), ""));
        setInput(R.id.editTextCreditcardExpirationMonth,
                mData.getString(getString(R.string.idPreferencesInputCreditcardMonth), ""));
        setInput(R.id.editTextCreditcardExpirationYear,
                mData.getString(getString(R.string.idPreferencesInputCreditcardYear), ""));
        setSpinner(mData.getString(getString(R.string.idPreferencesInputCreditcardType), ""));
    }

    /**
     * Reset all input fields.
     */
    @Override
    public void clearInputFields()
    {
        ((EditText) findViewById(R.id.editTextCreditcardNumber)).setText("");
        ((EditText) findViewById(R.id.editTextCreditcardExpirationMonth)).setText("");
        ((EditText) findViewById(R.id.editTextCreditcardExpirationYear)).setText("");
        ((EditText) findViewById(R.id.editTextCreditcardVerification)).setText("");
        ((Spinner) findViewById(R.id.spinnerCreditCardType)).setSelection(0);
    }
}
